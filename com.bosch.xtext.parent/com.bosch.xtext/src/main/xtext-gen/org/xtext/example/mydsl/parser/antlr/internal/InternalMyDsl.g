/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Module";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	iv_ruleModule=ruleModule
	{ $current=$iv_ruleModule.current; }
	EOF;

// Rule Module
ruleModule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModuleAccess().getConditionsConditionParserRuleCall_0_0());
				}
				lv_conditions_0_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModuleRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_0_0,
						"org.xtext.example.mydsl.MyDsl.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_op_1_1='&&'
						{
							newLeafNode(lv_op_1_1, grammarAccess.getModuleAccess().getOpAmpersandAmpersandKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModuleRule());
							}
							addWithLastConsumed($current, "op", lv_op_1_1, null);
						}
						    |
						lv_op_1_2='and'
						{
							newLeafNode(lv_op_1_2, grammarAccess.getModuleAccess().getOpAndKeyword_1_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModuleRule());
							}
							addWithLastConsumed($current, "op", lv_op_1_2, null);
						}
						    |
						lv_op_1_3='||'
						{
							newLeafNode(lv_op_1_3, grammarAccess.getModuleAccess().getOpVerticalLineVerticalLineKeyword_1_0_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModuleRule());
							}
							addWithLastConsumed($current, "op", lv_op_1_3, null);
						}
						    |
						lv_op_1_4='or'
						{
							newLeafNode(lv_op_1_4, grammarAccess.getModuleAccess().getOpOrKeyword_1_0_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModuleRule());
							}
							addWithLastConsumed($current, "op", lv_op_1_4, null);
						}
						    |
						lv_op_1_5=';'
						{
							newLeafNode(lv_op_1_5, grammarAccess.getModuleAccess().getOpSemicolonKeyword_1_0_0_4());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModuleRule());
							}
							addWithLastConsumed($current, "op", lv_op_1_5, null);
						}
						    |
						lv_op_1_6=','
						{
							newLeafNode(lv_op_1_6, grammarAccess.getModuleAccess().getOpCommaKeyword_1_0_0_5());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModuleRule());
							}
							addWithLastConsumed($current, "op", lv_op_1_6, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getModuleAccess().getConditionsConditionParserRuleCall_1_1_0());
					}
					lv_conditions_2_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModuleRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_2_0,
							"org.xtext.example.mydsl.MyDsl.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_left_0_1='name'
					{
						newLeafNode(lv_left_0_1, grammarAccess.getConditionAccess().getLeftNameKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "left", lv_left_0_1, null);
					}
					    |
					lv_left_0_2='description'
					{
						newLeafNode(lv_left_0_2, grammarAccess.getConditionAccess().getLeftDescriptionKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "left", lv_left_0_2, null);
					}
					    |
					lv_left_0_3='controllerId'
					{
						newLeafNode(lv_left_0_3, grammarAccess.getConditionAccess().getLeftControllerIdKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "left", lv_left_0_3, null);
					}
					    |
					lv_left_0_4='updatestatus'
					{
						newLeafNode(lv_left_0_4, grammarAccess.getConditionAccess().getLeftUpdatestatusKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "left", lv_left_0_4, null);
					}
					    |
					lv_left_0_5='ipaddress'
					{
						newLeafNode(lv_left_0_5, grammarAccess.getConditionAccess().getLeftIpaddressKeyword_0_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "left", lv_left_0_5, null);
					}
					    |
					lv_left_0_6='attribute'
					{
						newLeafNode(lv_left_0_6, grammarAccess.getConditionAccess().getLeftAttributeKeyword_0_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "left", lv_left_0_6, null);
					}
					    |
					lv_left_0_7='assigndds'
					{
						newLeafNode(lv_left_0_7, grammarAccess.getConditionAccess().getLeftAssignddsKeyword_0_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "left", lv_left_0_7, null);
					}
					    |
					lv_left_0_8='installedds'
					{
						newLeafNode(lv_left_0_8, grammarAccess.getConditionAccess().getLeftInstalleddsKeyword_0_0_7());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "left", lv_left_0_8, null);
					}
					    |
					lv_left_0_9='tag'
					{
						newLeafNode(lv_left_0_9, grammarAccess.getConditionAccess().getLeftTagKeyword_0_0_8());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "left", lv_left_0_9, null);
					}
					    |
					lv_left_0_10='lastcontrollerrequestat'
					{
						newLeafNode(lv_left_0_10, grammarAccess.getConditionAccess().getLeftLastcontrollerrequestatKeyword_0_0_9());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "left", lv_left_0_10, null);
					}
				)
			)
		)
		(
			(
				(
					lv_op_1_1='=='
					{
						newLeafNode(lv_op_1_1, grammarAccess.getConditionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_1, null);
					}
					    |
					lv_op_1_2='!='
					{
						newLeafNode(lv_op_1_2, grammarAccess.getConditionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_2, null);
					}
					    |
					lv_op_1_3='>'
					{
						newLeafNode(lv_op_1_3, grammarAccess.getConditionAccess().getOpGreaterThanSignKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_3, null);
					}
					    |
					lv_op_1_4='<'
					{
						newLeafNode(lv_op_1_4, grammarAccess.getConditionAccess().getOpLessThanSignKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_4, null);
					}
					    |
					lv_op_1_5='>='
					{
						newLeafNode(lv_op_1_5, grammarAccess.getConditionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_5, null);
					}
					    |
					lv_op_1_6='<='
					{
						newLeafNode(lv_op_1_6, grammarAccess.getConditionAccess().getOpLessThanSignEqualsSignKeyword_1_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_6, null);
					}
					    |
					lv_op_1_7='=le='
					{
						newLeafNode(lv_op_1_7, grammarAccess.getConditionAccess().getOpLeKeyword_1_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_7, null);
					}
					    |
					lv_op_1_8='=ge='
					{
						newLeafNode(lv_op_1_8, grammarAccess.getConditionAccess().getOpGeKeyword_1_0_7());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_8, null);
					}
					    |
					lv_op_1_9='=lt='
					{
						newLeafNode(lv_op_1_9, grammarAccess.getConditionAccess().getOpLtKeyword_1_0_8());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_9, null);
					}
					    |
					lv_op_1_10='=gt='
					{
						newLeafNode(lv_op_1_10, grammarAccess.getConditionAccess().getOpGtKeyword_1_0_9());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_10, null);
					}
					    |
					lv_op_1_11='=in='
					{
						newLeafNode(lv_op_1_11, grammarAccess.getConditionAccess().getOpInKeyword_1_0_10());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_11, null);
					}
					    |
					lv_op_1_12='=out='
					{
						newLeafNode(lv_op_1_12, grammarAccess.getConditionAccess().getOpOutKeyword_1_0_11());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_12, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getRightArgumentParserRuleCall_2_0());
				}
				lv_right_2_0=ruleArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"org.xtext.example.mydsl.MyDsl.Argument");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current; }
	EOF;

// Rule Argument
ruleArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_string_0_0=RULE_STRING
				{
					newLeafNode(lv_string_0_0, grammarAccess.getArgumentAccess().getStringSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				lv_int_1_0=RULE_INT
				{
					newLeafNode(lv_int_1_0, grammarAccess.getArgumentAccess().getIntINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"int",
						lv_int_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
