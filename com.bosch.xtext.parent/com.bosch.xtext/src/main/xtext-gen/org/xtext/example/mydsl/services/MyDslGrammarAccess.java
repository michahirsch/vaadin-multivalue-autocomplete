/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionsConditionParserRuleCall_0_0 = (RuleCall)cConditionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpAmpersandAmpersandKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpAndKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_0_0_2 = (Keyword)cOpAlternatives_1_0_0.eContents().get(2);
		private final Keyword cOpOrKeyword_1_0_0_3 = (Keyword)cOpAlternatives_1_0_0.eContents().get(3);
		private final Keyword cOpSemicolonKeyword_1_0_0_4 = (Keyword)cOpAlternatives_1_0_0.eContents().get(4);
		private final Keyword cOpCommaKeyword_1_0_0_5 = (Keyword)cOpAlternatives_1_0_0.eContents().get(5);
		private final Assignment cConditionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_1_1_0 = (RuleCall)cConditionsAssignment_1_1.eContents().get(0);
		
		//Module:
		//	conditions+=Condition (op+=('&&' | 'and' | '||' | 'or' | ';' | ',') conditions+=Condition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//conditions+=Condition (op+=('&&' | 'and' | '||' | 'or' | ';' | ',') conditions+=Condition)*
		public Group getGroup() { return cGroup; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_0() { return cConditionsAssignment_0; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_0_0() { return cConditionsConditionParserRuleCall_0_0; }
		
		//(op+=('&&' | 'and' | '||' | 'or' | ';' | ',') conditions+=Condition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=('&&' | 'and' | '||' | 'or' | ';' | ',')
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//('&&' | 'and' | '||' | 'or' | ';' | ',')
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_0_0_0() { return cOpAmpersandAmpersandKeyword_1_0_0_0; }
		
		//'and'
		public Keyword getOpAndKeyword_1_0_0_1() { return cOpAndKeyword_1_0_0_1; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_0_0_2() { return cOpVerticalLineVerticalLineKeyword_1_0_0_2; }
		
		//'or'
		public Keyword getOpOrKeyword_1_0_0_3() { return cOpOrKeyword_1_0_0_3; }
		
		//';'
		public Keyword getOpSemicolonKeyword_1_0_0_4() { return cOpSemicolonKeyword_1_0_0_4; }
		
		//','
		public Keyword getOpCommaKeyword_1_0_0_5() { return cOpCommaKeyword_1_0_0_5; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_1_1() { return cConditionsAssignment_1_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_1_1_0() { return cConditionsConditionParserRuleCall_1_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLeftAlternatives_0_0 = (Alternatives)cLeftAssignment_0.eContents().get(0);
		private final Keyword cLeftNameKeyword_0_0_0 = (Keyword)cLeftAlternatives_0_0.eContents().get(0);
		private final Keyword cLeftDescriptionKeyword_0_0_1 = (Keyword)cLeftAlternatives_0_0.eContents().get(1);
		private final Keyword cLeftControllerIdKeyword_0_0_2 = (Keyword)cLeftAlternatives_0_0.eContents().get(2);
		private final Keyword cLeftUpdatestatusKeyword_0_0_3 = (Keyword)cLeftAlternatives_0_0.eContents().get(3);
		private final Keyword cLeftIpaddressKeyword_0_0_4 = (Keyword)cLeftAlternatives_0_0.eContents().get(4);
		private final Keyword cLeftAttributeKeyword_0_0_5 = (Keyword)cLeftAlternatives_0_0.eContents().get(5);
		private final Keyword cLeftAssignddsKeyword_0_0_6 = (Keyword)cLeftAlternatives_0_0.eContents().get(6);
		private final Keyword cLeftInstalleddsKeyword_0_0_7 = (Keyword)cLeftAlternatives_0_0.eContents().get(7);
		private final Keyword cLeftTagKeyword_0_0_8 = (Keyword)cLeftAlternatives_0_0.eContents().get(8);
		private final Keyword cLeftLastcontrollerrequestatKeyword_0_0_9 = (Keyword)cLeftAlternatives_0_0.eContents().get(9);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_4 = (Keyword)cOpAlternatives_1_0.eContents().get(4);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_5 = (Keyword)cOpAlternatives_1_0.eContents().get(5);
		private final Keyword cOpLeKeyword_1_0_6 = (Keyword)cOpAlternatives_1_0.eContents().get(6);
		private final Keyword cOpGeKeyword_1_0_7 = (Keyword)cOpAlternatives_1_0.eContents().get(7);
		private final Keyword cOpLtKeyword_1_0_8 = (Keyword)cOpAlternatives_1_0.eContents().get(8);
		private final Keyword cOpGtKeyword_1_0_9 = (Keyword)cOpAlternatives_1_0.eContents().get(9);
		private final Keyword cOpInKeyword_1_0_10 = (Keyword)cOpAlternatives_1_0.eContents().get(10);
		private final Keyword cOpOutKeyword_1_0_11 = (Keyword)cOpAlternatives_1_0.eContents().get(11);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightArgumentParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Condition:
		//	left=('name' | 'description' | 'controllerId' | 'updatestatus' | 'ipaddress' | 'attribute' | 'assigndds' |
		//	'installedds' | 'tag' | 'lastcontrollerrequestat') op=('==' | '!=' | '>' | '<' | '>=' | '<=' | '=le=' | '=ge=' |
		//	'=lt=' | '=gt=' | '=in=' | '=out=') right=Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//left=('name' | 'description' | 'controllerId' | 'updatestatus' | 'ipaddress' | 'attribute' | 'assigndds' | 'installedds'
		//| 'tag' | 'lastcontrollerrequestat') op=('==' | '!=' | '>' | '<' | '>=' | '<=' | '=le=' | '=ge=' | '=lt=' | '=gt=' |
		//'=in=' | '=out=') right=Argument
		public Group getGroup() { return cGroup; }
		
		//left=('name' | 'description' | 'controllerId' | 'updatestatus' | 'ipaddress' | 'attribute' | 'assigndds' | 'installedds'
		//| 'tag' | 'lastcontrollerrequestat')
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//('name' | 'description' | 'controllerId' | 'updatestatus' | 'ipaddress' | 'attribute' | 'assigndds' | 'installedds' |
		//'tag' | 'lastcontrollerrequestat')
		public Alternatives getLeftAlternatives_0_0() { return cLeftAlternatives_0_0; }
		
		//'name'
		public Keyword getLeftNameKeyword_0_0_0() { return cLeftNameKeyword_0_0_0; }
		
		//'description'
		public Keyword getLeftDescriptionKeyword_0_0_1() { return cLeftDescriptionKeyword_0_0_1; }
		
		//'controllerId'
		public Keyword getLeftControllerIdKeyword_0_0_2() { return cLeftControllerIdKeyword_0_0_2; }
		
		//'updatestatus'
		public Keyword getLeftUpdatestatusKeyword_0_0_3() { return cLeftUpdatestatusKeyword_0_0_3; }
		
		//'ipaddress'
		public Keyword getLeftIpaddressKeyword_0_0_4() { return cLeftIpaddressKeyword_0_0_4; }
		
		//'attribute'
		public Keyword getLeftAttributeKeyword_0_0_5() { return cLeftAttributeKeyword_0_0_5; }
		
		//'assigndds'
		public Keyword getLeftAssignddsKeyword_0_0_6() { return cLeftAssignddsKeyword_0_0_6; }
		
		//'installedds'
		public Keyword getLeftInstalleddsKeyword_0_0_7() { return cLeftInstalleddsKeyword_0_0_7; }
		
		//'tag'
		public Keyword getLeftTagKeyword_0_0_8() { return cLeftTagKeyword_0_0_8; }
		
		//'lastcontrollerrequestat'
		public Keyword getLeftLastcontrollerrequestatKeyword_0_0_9() { return cLeftLastcontrollerrequestatKeyword_0_0_9; }
		
		//op=('==' | '!=' | '>' | '<' | '>=' | '<=' | '=le=' | '=ge=' | '=lt=' | '=gt=' | '=in=' | '=out=')
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//('==' | '!=' | '>' | '<' | '>=' | '<=' | '=le=' | '=ge=' | '=lt=' | '=gt=' | '=in=' | '=out=')
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_0_2() { return cOpGreaterThanSignKeyword_1_0_2; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_0_3() { return cOpLessThanSignKeyword_1_0_3; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_4() { return cOpGreaterThanSignEqualsSignKeyword_1_0_4; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_5() { return cOpLessThanSignEqualsSignKeyword_1_0_5; }
		
		//'=le='
		public Keyword getOpLeKeyword_1_0_6() { return cOpLeKeyword_1_0_6; }
		
		//'=ge='
		public Keyword getOpGeKeyword_1_0_7() { return cOpGeKeyword_1_0_7; }
		
		//'=lt='
		public Keyword getOpLtKeyword_1_0_8() { return cOpLtKeyword_1_0_8; }
		
		//'=gt='
		public Keyword getOpGtKeyword_1_0_9() { return cOpGtKeyword_1_0_9; }
		
		//'=in='
		public Keyword getOpInKeyword_1_0_10() { return cOpInKeyword_1_0_10; }
		
		//'=out='
		public Keyword getOpOutKeyword_1_0_11() { return cOpOutKeyword_1_0_11; }
		
		//right=Argument
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Argument
		public RuleCall getRightArgumentParserRuleCall_2_0() { return cRightArgumentParserRuleCall_2_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringAssignment_0.eContents().get(0);
		private final Assignment cIntAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_1_0 = (RuleCall)cIntAssignment_1.eContents().get(0);
		
		//Argument:
		//	string=STRING | int=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//string=STRING | int=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string=STRING
		public Assignment getStringAssignment_0() { return cStringAssignment_0; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0_0() { return cStringSTRINGTerminalRuleCall_0_0; }
		
		//int=INT
		public Assignment getIntAssignment_1() { return cIntAssignment_1; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_1_0() { return cIntINTTerminalRuleCall_1_0; }
	}
	
	
	private final ModuleElements pModule;
	private final ConditionElements pCondition;
	private final ArgumentElements pArgument;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModule = new ModuleElements();
		this.pCondition = new ConditionElements();
		this.pArgument = new ArgumentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Module:
	//	conditions+=Condition (op+=('&&' | 'and' | '||' | 'or' | ';' | ',') conditions+=Condition)*;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Condition:
	//	left=('name' | 'description' | 'controllerId' | 'updatestatus' | 'ipaddress' | 'attribute' | 'assigndds' |
	//	'installedds' | 'tag' | 'lastcontrollerrequestat') op=('==' | '!=' | '>' | '<' | '>=' | '<=' | '=le=' | '=ge=' |
	//	'=lt=' | '=gt=' | '=in=' | '=out=') right=Argument;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Argument:
	//	string=STRING | int=INT;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
