/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModule
entryRuleModule
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModuleAccess().getGroup()); }
		(rule__Module__Group__0)
		{ after(grammarAccess.getModuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArgument
entryRuleArgument
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleArgument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule Argument
ruleArgument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArgumentAccess().getAlternatives()); }
		(rule__Argument__Alternatives)
		{ after(grammarAccess.getArgumentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__OpAlternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getOpAmpersandAmpersandKeyword_1_0_0_0()); }
		'&&'
		{ after(grammarAccess.getModuleAccess().getOpAmpersandAmpersandKeyword_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getModuleAccess().getOpAndKeyword_1_0_0_1()); }
		'and'
		{ after(grammarAccess.getModuleAccess().getOpAndKeyword_1_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getModuleAccess().getOpVerticalLineVerticalLineKeyword_1_0_0_2()); }
		'||'
		{ after(grammarAccess.getModuleAccess().getOpVerticalLineVerticalLineKeyword_1_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getModuleAccess().getOpOrKeyword_1_0_0_3()); }
		'or'
		{ after(grammarAccess.getModuleAccess().getOpOrKeyword_1_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getModuleAccess().getOpSemicolonKeyword_1_0_0_4()); }
		';'
		{ after(grammarAccess.getModuleAccess().getOpSemicolonKeyword_1_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getModuleAccess().getOpCommaKeyword_1_0_0_5()); }
		','
		{ after(grammarAccess.getModuleAccess().getOpCommaKeyword_1_0_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__LeftAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getLeftNameKeyword_0_0_0()); }
		'name'
		{ after(grammarAccess.getConditionAccess().getLeftNameKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLeftDescriptionKeyword_0_0_1()); }
		'description'
		{ after(grammarAccess.getConditionAccess().getLeftDescriptionKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLeftControllerIdKeyword_0_0_2()); }
		'controllerId'
		{ after(grammarAccess.getConditionAccess().getLeftControllerIdKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLeftUpdatestatusKeyword_0_0_3()); }
		'updatestatus'
		{ after(grammarAccess.getConditionAccess().getLeftUpdatestatusKeyword_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLeftIpaddressKeyword_0_0_4()); }
		'ipaddress'
		{ after(grammarAccess.getConditionAccess().getLeftIpaddressKeyword_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLeftAttributeKeyword_0_0_5()); }
		'attribute'
		{ after(grammarAccess.getConditionAccess().getLeftAttributeKeyword_0_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLeftAssignddsKeyword_0_0_6()); }
		'assigndds'
		{ after(grammarAccess.getConditionAccess().getLeftAssignddsKeyword_0_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLeftInstalleddsKeyword_0_0_7()); }
		'installedds'
		{ after(grammarAccess.getConditionAccess().getLeftInstalleddsKeyword_0_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLeftTagKeyword_0_0_8()); }
		'tag'
		{ after(grammarAccess.getConditionAccess().getLeftTagKeyword_0_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLeftLastcontrollerrequestatKeyword_0_0_9()); }
		'lastcontrollerrequestat'
		{ after(grammarAccess.getConditionAccess().getLeftLastcontrollerrequestatKeyword_0_0_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__OpAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0()); }
		'=='
		{ after(grammarAccess.getConditionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1()); }
		'!='
		{ after(grammarAccess.getConditionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getOpGreaterThanSignKeyword_1_0_2()); }
		'>'
		{ after(grammarAccess.getConditionAccess().getOpGreaterThanSignKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getOpLessThanSignKeyword_1_0_3()); }
		'<'
		{ after(grammarAccess.getConditionAccess().getOpLessThanSignKeyword_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_4()); }
		'>='
		{ after(grammarAccess.getConditionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getOpLessThanSignEqualsSignKeyword_1_0_5()); }
		'<='
		{ after(grammarAccess.getConditionAccess().getOpLessThanSignEqualsSignKeyword_1_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getOpLeKeyword_1_0_6()); }
		'=le='
		{ after(grammarAccess.getConditionAccess().getOpLeKeyword_1_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getOpGeKeyword_1_0_7()); }
		'=ge='
		{ after(grammarAccess.getConditionAccess().getOpGeKeyword_1_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getOpLtKeyword_1_0_8()); }
		'=lt='
		{ after(grammarAccess.getConditionAccess().getOpLtKeyword_1_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getOpGtKeyword_1_0_9()); }
		'=gt='
		{ after(grammarAccess.getConditionAccess().getOpGtKeyword_1_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getOpInKeyword_1_0_10()); }
		'=in='
		{ after(grammarAccess.getConditionAccess().getOpInKeyword_1_0_10()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getOpOutKeyword_1_0_11()); }
		'=out='
		{ after(grammarAccess.getConditionAccess().getOpOutKeyword_1_0_11()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentAccess().getStringAssignment_0()); }
		(rule__Argument__StringAssignment_0)
		{ after(grammarAccess.getArgumentAccess().getStringAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getArgumentAccess().getIntAssignment_1()); }
		(rule__Argument__IntAssignment_1)
		{ after(grammarAccess.getArgumentAccess().getIntAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getConditionsAssignment_0()); }
	(rule__Module__ConditionsAssignment_0)
	{ after(grammarAccess.getModuleAccess().getConditionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getGroup_1()); }
	(rule__Module__Group_1__0)*
	{ after(grammarAccess.getModuleAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group_1__0__Impl
	rule__Module__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getOpAssignment_1_0()); }
	(rule__Module__OpAssignment_1_0)
	{ after(grammarAccess.getModuleAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getConditionsAssignment_1_1()); }
	(rule__Module__ConditionsAssignment_1_1)
	{ after(grammarAccess.getModuleAccess().getConditionsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getLeftAssignment_0()); }
	(rule__Condition__LeftAssignment_0)
	{ after(grammarAccess.getConditionAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getOpAssignment_1()); }
	(rule__Condition__OpAssignment_1)
	{ after(grammarAccess.getConditionAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getRightAssignment_2()); }
	(rule__Condition__RightAssignment_2)
	{ after(grammarAccess.getConditionAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Module__ConditionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getConditionsConditionParserRuleCall_0_0()); }
		ruleCondition
		{ after(grammarAccess.getModuleAccess().getConditionsConditionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getOpAlternatives_1_0_0()); }
		(rule__Module__OpAlternatives_1_0_0)
		{ after(grammarAccess.getModuleAccess().getOpAlternatives_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__ConditionsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getConditionsConditionParserRuleCall_1_1_0()); }
		ruleCondition
		{ after(grammarAccess.getModuleAccess().getConditionsConditionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getLeftAlternatives_0_0()); }
		(rule__Condition__LeftAlternatives_0_0)
		{ after(grammarAccess.getConditionAccess().getLeftAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getOpAlternatives_1_0()); }
		(rule__Condition__OpAlternatives_1_0)
		{ after(grammarAccess.getConditionAccess().getOpAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getRightArgumentParserRuleCall_2_0()); }
		ruleArgument
		{ after(grammarAccess.getConditionAccess().getRightArgumentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__StringAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentAccess().getStringSTRINGTerminalRuleCall_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getArgumentAccess().getStringSTRINGTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__IntAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentAccess().getIntINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getArgumentAccess().getIntINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
